{
  "version": 3,
  "sources": [
    "/usr/local/lib/node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "/Users/rgwozdz/DevApps/seed-angular-multipage-app/app-config.json",
    "/Users/rgwozdz/DevApps/seed-angular-multipage-app/app/pages/login/login.module.js",
    "/Users/rgwozdz/DevApps/seed-angular-multipage-app/app/pages/login/login.require.js",
    "/Users/rgwozdz/DevApps/seed-angular-multipage-app/app/shared/modules/auth.module.js",
    "/Users/rgwozdz/DevApps/seed-angular-multipage-app/app/shared/modules/settings.module.js"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "module.exports={\n    \"apiHost\": \"http://localhost:3333/\",\n\n    \"apiRoutes\": {\n      \"authenticate\": \"authenticate\",\n      \"authenticateToken\": \"api/authenticate-token\"\n    }\n\n}\n",
    "var app = angular.module('loginPage',  ['App.Auth', 'App.Settings']);\n\napp.controller('LoginPageController', ['$scope', '$http', '$q','AuthUtils', function($scope, $http, $q,\n                                                                                        AuthUtils){\n    AuthUtils.checkForToken();\n\n    AuthUtils.checkTokenValidity()\n    .then(function (response) {\n        // Token is valid; they can stay on this page.\n        return;\n    }, function (err) {\n\n           AuthUtils.logout();\n    });\n\n}]);\n\n// Handle login event\napp.controller('LoginFormController', ['$scope', '$http', '$window', 'settings', function($scope, $http, $window, settings) {\n\n    var controllerContext = this;\n\n    controllerContext.user = {username: null, password: null};\n\n    controllerContext.submitCreds = function(){\n\n        controllerContext.badCredentials = false;\n\n            // Authenticate creds\n            var responsePromise = $http.post(settings.apiRoutes.authenticate, controllerContext.user);\n\n            responsePromise.success(function(res, status, headers, config) {\n\n                var message = res.message || null;\n\n                if(message === 'authenticated'){\n\n                    $window.location.href = 'index.html';\n\n                } else {\n                    controllerContext.badCredentials = true;\n                }\n            });\n\n            responsePromise.error(function(res, status, headers, config) {\n                controllerContext.badCredentials = true;\n            });\n\n    };\n\n    var self = this;\n    self.submit = function () {\n        console.log('User clicked submit with ', self.user);\n    };\n}]);\n",
    "require('./../../shared/modules/auth.module.js');\nrequire('./../../shared/modules/settings.module.js');\nrequire('./login.module.js');\n",
    "/**\n * Created by rgwozdz on 12/3/14.\n */\n\n// Create the authentication module\nvar auth = angular.module('App.Auth', ['App.Settings']);\n\nauth.config(['$httpProvider', function($httpProvider) {\n    $httpProvider.interceptors.push(function($q, $location, $window) {\n        return {\n\n            request: function(config) {\n\n                // Attach the authorization header for the API\n                config.headers.Authorization = 'Bearer ' + $window.localStorage.userToken;\n\n                return config;\n            },\n\n            requestError: function(rejection) {\n\n                // error code here\n\n                return $q.reject(rejection);\n\n            },\n            response: function(result) {\n\n                // We refresh our auth token on every API response so that the expiration window slides forward.\n                // So, if the response is delivered with a new authorization header attached, update the local storage value\n                var authHeaderToken = result.headers('authorization') || null;\n\n                if(authHeaderToken !== null) {\n                    // Store token in local storage\n                    $window.localStorage.userToken = authHeaderToken;\n\n                }\n\n                return result;\n            },\n\n            responseError: function(rejection) {\n\n                switch (rejection.status) {\n                    case 0:\n                        // Send to error page if no api response\n                        $window.location = \"503.html\";\n                        return;\n\n                        break;\n\n                    case 401:\n\n                        // Delete userToken from localStorage\n                        delete $window.localStorage.userToken;\n\n                        var loc =  $window.location.href;\n\n                        // redirect to login page if not already there\n                        if (loc.indexOf('login.html') === -1) {\n\n                            // redirect to login\n                            $window.location = 'login.html';\n                        }\n\n                        break;\n\n                }\n\n                return $q.reject(rejection);\n            }\n        };\n    });\n}]);\n\nauth.factory('AuthUtils', ['$q', '$http', '$window', '$location','settings', function($q, $http, $window, $location, settings) {\n\n    var checkForToken = function() {\n\n        var userToken = $window.localStorage.userToken || null;\n\n        var loc = $window.location.href;\n\n        if (userToken !== null) {\n\n            return;\n\n        } else if (userToken === null && loc.indexOf('login.html') === -1) {\n\n            $window.location.href = 'login.html';\n            return;\n\n        } else if (userToken === null && loc.indexOf('login.html') > -1) {\n\n            return;\n\n        } else if (userToken === null) {\n\n            // Redirect to login page unless they are already on it; this prob not necessary, but just in case for now\n            if (loc.indexOf('login.html') === -1) {\n                $window.location.href = 'login.html';\n            }\n\n            // No token and already on the login page\n            return;\n        }\n    };\n\n    var checkTokenValidity  = function(){\n\n        var deferred = $q.defer();\n\n        // AJAX request to token checking route; the token is stored as Authorization header value in the\n        // http request\n        var responsePromise = $http.get(settings.apiRoutes.authenticateToken);\n\n        responsePromise.success(function(res, status, headers, config) {\n\n            // if the token is valid, response will contain {authenticated: true}\n            if(res.hasOwnProperty('authenticated')){\n\n                if(res.authenticated === true) {\n                    // Valid token\n                    deferred.resolve(true);\n                } else {\n                    // token is invalid;\n                    deferred.reject(false)\n                }\n\n            } else {\n\n                deferred.reject(false);\n            }\n\n        });\n\n        responsePromise.error(function(res, status, headers, config) {\n            deferred.reject(false);\n        });\n\n        return deferred.promise;\n\n    };\n\n    var logout = function(){\n\n        // Delete userToken from localStorage\n        delete $window.localStorage.userToken;\n\n        var loc = $window.location.href;\n\n        // redirect to login page if not already there\n        if (loc.indexOf('login.html') === -1) {\n\n            // redirect to login\n            $window.location.href = 'login.html';\n        }\n\n        return;\n\n    };\n\n    return {\n        checkForToken: function() { return checkForToken(); },\n        checkTokenValidity : function(){ return checkTokenValidity();},\n        logout: function(){ return logout();}\n\n    };\n\n}]);\n\n\n// Controller for logout DOM event\nauth.controller('LogoutController', ['$scope', 'AuthUtils',function($scope, AuthUtils) {\n\n    this.logout = function() {\n\n        AuthUtils.logout();\n    };\n\n}]);\n",
    "/**\n * Created by rgwozdz on 12/8/14.\n */\n\nvar isUnitTesting = !!document.URL.match(/debug\\.html/);\n\nif(isUnitTesting === true) {\n\n    var settings = karmaSettings;\n} else {\n    var settings = require('../../../app-config.json');\n}\n\n/*\nvar settings = {\n\n    \"apiHost\": \"http://localhost:3333/\",\n\n\n    \"apiRoutes\": {\n        \"authenticate\": \"authenticate\",\n        \"authenticateToken\": \"api/authenticate-token\",\n        \"goNoGo\" :\"api/test-suites-overview\"\n    }\n\n};\n*/\n\n// Build complete API routes (host + route);\nfor (var key in settings.apiRoutes) {\n\n    settings.apiRoutes[key] = settings.apiHost + settings.apiRoutes[key];\n}\n\nvar applicationSettings = angular.module('App.Settings',  []);\n\napplicationSettings.constant('settings', settings);\n\n"
  ]
}